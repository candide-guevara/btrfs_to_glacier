package main

import "encoding/base64"
import "encoding/json"
import "fmt"
import "btrfs_to_glacier/types"
import "btrfs_to_glacier/util"

const writefile_dump = `
YnRyZnMtc3RyZWFtAAEAAABSAAAAAgDFIIkXDwAOAHNuYXBfd3JpdGVmaWxlAQAQAKG0RvH0MDdM
sJtkKVIxcaQCAAgACgAAAAAAAAAUABAAH391k2+krUurhLzTNfFkdhUACAAJAAAAAAAAACIAAAAW
AODI1/cPAAYAY291Y291EgAIAAAAAAAAAAAABAAIAA0AAAAAAAAAOgAAABQAqIc0zg8ABgBjb3Vj
b3ULAAwArtZFYAAAAAAnH44UCgAMAN3WRWAAAAAA5A4/JwkADADd1kVgAAAAAOQOPycAAAAAFQBQ
bMmd
`
const newfile_dump = `
YnRyZnMtc3RyZWFtAAEAAABQAAAAAgBNscRKDwAMAHNuYXBfbmV3ZmlsZQEAEAAff3WTb6StS6uE
vNM18WR2AgAIAAkAAAAAAAAAFAAQAIjDrOVJonVLvTrdKdUO6FAVAAgABwAAAAAAAAA0AAAAFABY
aSr6DwAAAAsADACK1kVgAAAAAGRrhjUKAAwArtZFYAAAAAAnH44UCQAMAK7WRWAAAAAAJx+OFBgA
AAADAJ5zNLcPAAgAbzI1OC04LTADAAgAAgEAAAAAAAAWAAAACQB2X3pyDwAIAG8yNTgtOC0wEAAG
AGNvdWNvdTQAAAAUAFhpKvoPAAAACwAMAIrWRWAAAAAAZGuGNQoADACu1kVgAAAAACcfjhQJAAwA
rtZFYAAAAAAnH44UIgAAABYAdDaUJw8ABgBjb3Vjb3USAAgAAAAAAAAAAAAEAAgABwAAAAAAAAAi
AAAAEwDOgwlrDwAGAGNvdWNvdQYACADoAwAAAAAAAAcACADpAwAAAAAAABYAAAASAKBh3IcPAAYA
Y291Y291BQAIAKQBAAAAAAAAOgAAABQAmI4t4Q8ABgBjb3Vjb3ULAAwArtZFYAAAAAAnH44UCgAM
AK7WRWAAAAAAJx+OFAkADACu1kVgAAAAACcfjhQAAAAAFQBQbMmd
`
const mkdir_dump = `
YnRyZnMtc3RyZWFtAAEAAABOAAAAAgDDjMLQDwAKAHNuYXBfbWtkaXIBABAAe/1BqeWu9E+/DzF1
fUhPugIACAANAAAAAAAAABQAEADxqt24CbmQQpTdJxjz8hedFQAIAAwAAAAAAAAANAAAABQAji/9
Ig8AAAALAAwAitZFYAAAAABka4Y1CgAMAC3XRWAAAAAAH2arNAkADAAt10VgAAAAAB9mqzQZAAAA
BAAV0IpwDwAJAG8yNTktMTMtMAMACAADAQAAAAAAABUAAAAJANoXbqcPAAkAbzI1OS0xMy0wEAAE
AGFkaXI0AAAAFACOL/0iDwAAAAsADACK1kVgAAAAAGRrhjUKAAwALddFYAAAAAAfZqs0CQAMAC3X
RWAAAAAAH2arNCAAAAATAH1EGvUPAAQAYWRpcgYACADoAwAAAAAAAAcACADpAwAAAAAAABQAAAAS
APJN/2oPAAQAYWRpcgUACADtAQAAAAAAADgAAAAUAH9Agk8PAAQAYWRpcgsADAAt10VgAAAAAB9m
qzQKAAwAQddFYAAAAADGTGwYCQAMAEHXRWAAAAAAxkxsGBkAAAADAOgwy14PAAkAbzI2MC0xMy0w
AwAIAAQBAAAAAAAAGgAAAAkAHn2gkg8ACQBvMjYwLTEzLTAQAAkAYWRpci9sb2NvOAAAABQAf0CC
Tw8ABABhZGlyCwAMAC3XRWAAAAAAH2arNAoADABB10VgAAAAAMZMbBgJAAwAQddFYAAAAADGTGwY
JQAAABYAgmt0Iw8ACQBhZGlyL2xvY28SAAgAAAAAAAAAAAAEAAgABgAAAAAAAAAlAAAAEwC8Ec5S
DwAJAGFkaXIvbG9jbwYACADoAwAAAAAAAAcACADpAwAAAAAAABkAAAASAIOesBgPAAkAYWRpci9s
b2NvBQAIAKQBAAAAAAAAPQAAABQAAqSvkg8ACQBhZGlyL2xvY28LAAwAQddFYAAAAADGTGwYCgAM
AEHXRWAAAAAAxkxsGAkADABB10VgAAAAAMZMbBgAAAAAFQBQbMmd
`
const movefile_dump = `
YnRyZnMtc3RyZWFtAAEAAABRAAAAAgCvYRcyDwANAHNuYXBfbW92ZWZpbGUBABAAGBnf+ob+T065
Qxael6X46gIACAALAAAAAAAAABQAEAChtEbx9DA3TLCbZClSMXGkFQAIAAoAAAAAAAAANAAAABQA
hfK6rg8AAAALAAwAitZFYAAAAABka4Y1CgAMAPbWRWAAAAAAuJmQFgkADAD21kVgAAAAALiZkBYX
AAAACgD2hb7WDwAJAGNvdWNvdV9tdhEABgBjb3Vjb3UKAAAACwDdngrnDwAGAGNvdWNvdTQAAAAU
AIXyuq4PAAAACwAMAIrWRWAAAAAAZGuGNQoADAD21kVgAAAAALiZkBYJAAwA9tZFYAAAAAC4mZAW
NAAAABQAhfK6rg8AAAALAAwAitZFYAAAAABka4Y1CgAMAPbWRWAAAAAAuJmQFgkADAD21kVgAAAA
ALiZkBY9AAAAFAB+V8OuDwAJAGNvdWNvdV9tdgsADACu1kVgAAAAACcfjhQKAAwA3dZFYAAAAADk
Dj8nCQAMAPbWRWAAAAAAuJmQFgAAAAAVAFBsyZ0=
`
const rmdir_dump = `
YnRyZnMtc3RyZWFtAAEAAABOAAAAAgD5RDtoDwAKAHNuYXBfcm1kaXIBABAAXzb4KIcr1k2btGUI
/T5ZpgIACAAOAAAAAAAAABQAEAB7/UGp5a70T78PMXV9SE+6FQAIAA0AAAAAAAAANAAAABQAroIS
hQ8AAAALAAwAitZFYAAAAABka4Y1CgAMAF/XRWAAAAAAOGbsAQkADABf10VgAAAAADhm7AEVAAAA
CQDmvFpKDwAEAGFkaXIQAAkAbzI1OS0xMy0wNAAAABQAroIShQ8AAAALAAwAitZFYAAAAABka4Y1
CgAMAF/XRWAAAAAAOGbsAQkADABf10VgAAAAADhm7AESAAAACwDQSbsvDwAOAG8yNTktMTMtMC9s
b2NvDQAAAAwAlQGD8Q8ACQBvMjU5LTEzLTAAAAAAFQBQbMmd
`
const rmfile_dump = `
YnRyZnMtc3RyZWFtAAEAAABPAAAAAgDFNjjRDwALAHNuYXBfcm1maWxlAQAQAPGq3bgJuZBClN0n
GPPyF50CAAgADAAAAAAAAAAUABAAGBnf+ob+T065Qxael6X46hUACAALAAAAAAAAADQAAAAUAE8J
Vq0PAAAACwAMAIrWRWAAAAAAZGuGNQoADAAW10VgAAAAAKqJwywJAAwAFtdFYAAAAACqicMsDwAA
AAsAE06FqA8ACwBmaWxlLmVodnJuRDQAAAAUAE8JVq0PAAAACwAMAIrWRWAAAAAAZGuGNQoADAAW
10VgAAAAAKqJwywJAAwAFtdFYAAAAACqicMsAAAAABUAUGzJnQ==
`

// ini state : adir/coucou2 adir/coucou3
// adir -> mvdir
// mvdir/coucou3 -> mvdir/mv_coucou
// write mvdir/coucou2
// new mvdir/coucou4
const complexmv_dump = `
YnRyZnMtc3RyZWFtAAEAAABMAAAAAgCZ7tQbDwAIAGFzdWJ2b2wzAQAQAH0m0KIsk+VDh4ewpnWk
25ICAAgADAAAAAAAAAAUABAA4DZkmfAqnUio4OI1X5xDphUACAAJAAAAAAAAADQAAAAUACX8xC8P
AAAACwAMAMVfVGAAAAAAF5EMOwoADAAnYFRgAAAAAFZy2R4JAAwAJ2BUYAAAAABWctkeEQAAAAkA
u6dRFg8ABABhZGlyEAAFAG12ZGlyNAAAABQAJfzELw8AAAALAAwAxV9UYAAAAAAXkQw7CgAMACdg
VGAAAAAAVnLZHgkADAAnYFRgAAAAAFZy2R40AAAAFAAl/MQvDwAAAAsADADFX1RgAAAAABeRDDsK
AAwAJ2BUYAAAAABWctkeCQAMACdgVGAAAAAAVnLZHjkAAAAUAHdQWRcPAAUAbXZkaXILAAwA319U
YAAAAACfrnUtCgAMAFZgVGAAAAAAk96TLwkADABWYFRgAAAAAJPeky8pAAAAFgC0jc8GDwANAG12
ZGlyL2NvdWNvdTISAAgAAAAAAAAAAAAEAAgACAAAAAAAAABBAAAAFACw5uMADwANAG12ZGlyL2Nv
dWNvdTILAAwA7l9UYAAAAAAJs8cgCgAMAIxgVGAAAAAAZcbbLQkADACMYFRgAAAAAGXG2y0kAAAA
CgAvdUGuDwAPAG12ZGlyL212X2NvdWNvdREADQBtdmRpci9jb3Vjb3UzEQAAAAsAl+gM2Q8ADQBt
dmRpci9jb3Vjb3UzOQAAABQAd1BZFw8ABQBtdmRpcgsADADfX1RgAAAAAJ+udS0KAAwAVmBUYAAA
AACT3pMvCQAMAFZgVGAAAAAAk96TLzkAAAAUAHdQWRcPAAUAbXZkaXILAAwA319UYAAAAACfrnUt
CgAMAFZgVGAAAAAAk96TLwkADABWYFRgAAAAAJPeky9DAAAAFAC+CngYDwAPAG12ZGlyL212X2Nv
dWNvdQsADAD7X1RgAAAAAGatqQAKAAwA+19UYAAAAABmrakACQAMAFZgVGAAAAAAk96TLxkAAAAD
APPJ8noPAAkAbzI2Mi0xMC0wAwAIAAYBAAAAAAAAHgAAAAkA0x/aeQ8ACQBvMjYyLTEwLTAQAA0A
bXZkaXIvY291Y291NDkAAAAUAHdQWRcPAAUAbXZkaXILAAwA319UYAAAAACfrnUtCgAMAFZgVGAA
AAAAk96TLwkADABWYFRgAAAAAJPeky8pAAAAFgD6NHXiDwANAG12ZGlyL2NvdWNvdTQSAAgAAAAA
AAAAAAAEAAgACAAAAAAAAAApAAAAEwDXNrrEDwANAG12ZGlyL2NvdWNvdTQGAAgA6AMAAAAAAAAH
AAgA6QMAAAAAAAAdAAAAEgBphoMCDwANAG12ZGlyL2NvdWNvdTQFAAgApAEAAAAAAABBAAAAFACG
u7ecDwANAG12ZGlyL2NvdWNvdTQLAAwAP2BUYAAAAAA50AohCgAMAD9gVGAAAAAAOdAKIQkADAA/
YFRgAAAAADnQCiEAAAAAFQBQbMmd
`

// tree to create :
// adir/asubdir
// adir/asubdir/coucou3
// adir/coucou2
// adir/asubdir2
// adir/asubdir2/coucou4
// adir/asubdir_empty
const newtree_dump = `
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
MgAAAAAVAFBsyZ0=
`

// tree to remove same from newtree_dump
const rmtree_dump = `
YnRyZnMtc3RyZWFtAAEAAABMAAAAAgC4ADR+DwAIAGFzdWJ2b2wzAQAQALNwoX1C3FREqOaI0JYt
hbICAAgACgAAAAAAAAAUABAAchJNJ04eZ0KLfu1pCbAFNxUACAAJAAAAAAAAADQAAAAUAHF3E2EP
AAAACwAMACNiVGAAAAAA/3HMIAoADACMYlRgAAAAAH8+8yMJAAwAjGJUYAAAAAB/PvMjFAAAAAkA
52dyHw8ABABhZGlyEAAIAG8yNTgtOC0wNAAAABQAcXcTYQ8AAAALAAwAI2JUYAAAAAD/ccwgCgAM
AIxiVGAAAAAAfz7zIwkADACMYlRgAAAAAH8+8yMgAAAACQDd2dEDDwAQAG8yNTgtOC0wL2FzdWJk
aXIQAAgAbzI1OS04LTAUAAAACwDe1qfWDwAQAG8yNTgtOC0wL2NvdWNvdTIUAAAACwC4bR4UDwAQ
AG8yNTktOC0wL2NvdWNvdTMMAAAADAA/3I2IDwAIAG8yNTktOC0wIQAAAAkAcHEVlQ8AEQBvMjU4
LTgtMC9hc3ViZGlyMhAACABvMjYyLTktMBQAAAALAC78p3kPABAAbzI2Mi05LTAvY291Y291NAwA
AAAMAP4+JJQPAAgAbzI2Mi05LTAaAAAADABTza5mDwAWAG8yNTgtOC0wL2FzdWJkaXJfZW1wdHkM
AAAADACTs5ywDwAIAG8yNTgtOC0wAAAAABUAUGzJnQ==
`

func TestSendDumpAll(btrfsutil types.Btrfsutil) {
  TestSendDump(btrfsutil, "newfile", newfile_dump)
  TestSendDump(btrfsutil, "writefile", writefile_dump)
  TestSendDump(btrfsutil, "movefile", movefile_dump)
  TestSendDump(btrfsutil, "rmfile", rmfile_dump)
  TestSendDump(btrfsutil, "mkdir", mkdir_dump)
  TestSendDump(btrfsutil, "rmdir", rmdir_dump)
  TestSendDump(btrfsutil, "newtree", newtree_dump)
  TestSendDump(btrfsutil, "rmtree", rmtree_dump)
  TestSendDump(btrfsutil, "complexmv", complexmv_dump)
}

func TestSendDump(btrfsutil types.Btrfsutil, dumpname string, dump_base64 string) {
  var err error
  var json_str []byte
  var dump_bytes []byte
  var changes *types.SendDumpOperations
  var preload_pipe *types.MockPreloadedPipe

  dump_bytes, err = base64.StdEncoding.DecodeString(dump_base64)
  if err != nil { panic(fmt.Sprintf("failed base64.StdEncoding.DecodeString %v", err)) }

  // Dump should be small enough not to block pipe
  preload_pipe = types.NewMockPreloadedPipe(dump_bytes)
  defer preload_pipe.Close()

  changes, err = btrfsutil.ReadAndProcessSendStream(preload_pipe.ReadEnd())
  json_str, err = json.MarshalIndent(changes, "", "  ")
  util.Infof("err=%v\n%s = %s", err, dumpname, json_str)
}

