package main

import "encoding/base64"
import "fmt"
import "os"
import pb "btrfs_to_glacier/messages"
import "btrfs_to_glacier/shim"
import "btrfs_to_glacier/util"

const writefile_dump = `
YnRyZnMtc3RyZWFtAAEAAABSAAAAAgDFIIkXDwAOAHNuYXBfd3JpdGVmaWxlAQAQAKG0RvH0MDdM
sJtkKVIxcaQCAAgACgAAAAAAAAAUABAAH391k2+krUurhLzTNfFkdhUACAAJAAAAAAAAACIAAAAW
AODI1/cPAAYAY291Y291EgAIAAAAAAAAAAAABAAIAA0AAAAAAAAAOgAAABQAqIc0zg8ABgBjb3Vj
b3ULAAwArtZFYAAAAAAnH44UCgAMAN3WRWAAAAAA5A4/JwkADADd1kVgAAAAAOQOPycAAAAAFQBQ
bMmd
`
const newfile_dump = `
YnRyZnMtc3RyZWFtAAEAAABQAAAAAgBNscRKDwAMAHNuYXBfbmV3ZmlsZQEAEAAff3WTb6StS6uE
vNM18WR2AgAIAAkAAAAAAAAAFAAQAIjDrOVJonVLvTrdKdUO6FAVAAgABwAAAAAAAAA0AAAAFABY
aSr6DwAAAAsADACK1kVgAAAAAGRrhjUKAAwArtZFYAAAAAAnH44UCQAMAK7WRWAAAAAAJx+OFBgA
AAADAJ5zNLcPAAgAbzI1OC04LTADAAgAAgEAAAAAAAAWAAAACQB2X3pyDwAIAG8yNTgtOC0wEAAG
AGNvdWNvdTQAAAAUAFhpKvoPAAAACwAMAIrWRWAAAAAAZGuGNQoADACu1kVgAAAAACcfjhQJAAwA
rtZFYAAAAAAnH44UIgAAABYAdDaUJw8ABgBjb3Vjb3USAAgAAAAAAAAAAAAEAAgABwAAAAAAAAAi
AAAAEwDOgwlrDwAGAGNvdWNvdQYACADoAwAAAAAAAAcACADpAwAAAAAAABYAAAASAKBh3IcPAAYA
Y291Y291BQAIAKQBAAAAAAAAOgAAABQAmI4t4Q8ABgBjb3Vjb3ULAAwArtZFYAAAAAAnH44UCgAM
AK7WRWAAAAAAJx+OFAkADACu1kVgAAAAACcfjhQAAAAAFQBQbMmd
`
const mkdir_dump = `
YnRyZnMtc3RyZWFtAAEAAABOAAAAAgDDjMLQDwAKAHNuYXBfbWtkaXIBABAAe/1BqeWu9E+/DzF1
fUhPugIACAANAAAAAAAAABQAEADxqt24CbmQQpTdJxjz8hedFQAIAAwAAAAAAAAANAAAABQAji/9
Ig8AAAALAAwAitZFYAAAAABka4Y1CgAMAC3XRWAAAAAAH2arNAkADAAt10VgAAAAAB9mqzQZAAAA
BAAV0IpwDwAJAG8yNTktMTMtMAMACAADAQAAAAAAABUAAAAJANoXbqcPAAkAbzI1OS0xMy0wEAAE
AGFkaXI0AAAAFACOL/0iDwAAAAsADACK1kVgAAAAAGRrhjUKAAwALddFYAAAAAAfZqs0CQAMAC3X
RWAAAAAAH2arNCAAAAATAH1EGvUPAAQAYWRpcgYACADoAwAAAAAAAAcACADpAwAAAAAAABQAAAAS
APJN/2oPAAQAYWRpcgUACADtAQAAAAAAADgAAAAUAH9Agk8PAAQAYWRpcgsADAAt10VgAAAAAB9m
qzQKAAwAQddFYAAAAADGTGwYCQAMAEHXRWAAAAAAxkxsGBkAAAADAOgwy14PAAkAbzI2MC0xMy0w
AwAIAAQBAAAAAAAAGgAAAAkAHn2gkg8ACQBvMjYwLTEzLTAQAAkAYWRpci9sb2NvOAAAABQAf0CC
Tw8ABABhZGlyCwAMAC3XRWAAAAAAH2arNAoADABB10VgAAAAAMZMbBgJAAwAQddFYAAAAADGTGwY
JQAAABYAgmt0Iw8ACQBhZGlyL2xvY28SAAgAAAAAAAAAAAAEAAgABgAAAAAAAAAlAAAAEwC8Ec5S
DwAJAGFkaXIvbG9jbwYACADoAwAAAAAAAAcACADpAwAAAAAAABkAAAASAIOesBgPAAkAYWRpci9s
b2NvBQAIAKQBAAAAAAAAPQAAABQAAqSvkg8ACQBhZGlyL2xvY28LAAwAQddFYAAAAADGTGwYCgAM
AEHXRWAAAAAAxkxsGAkADABB10VgAAAAAMZMbBgAAAAAFQBQbMmd
`
const movefile_dump = `
YnRyZnMtc3RyZWFtAAEAAABRAAAAAgCvYRcyDwANAHNuYXBfbW92ZWZpbGUBABAAGBnf+ob+T065
Qxael6X46gIACAALAAAAAAAAABQAEAChtEbx9DA3TLCbZClSMXGkFQAIAAoAAAAAAAAANAAAABQA
hfK6rg8AAAALAAwAitZFYAAAAABka4Y1CgAMAPbWRWAAAAAAuJmQFgkADAD21kVgAAAAALiZkBYX
AAAACgD2hb7WDwAJAGNvdWNvdV9tdhEABgBjb3Vjb3UKAAAACwDdngrnDwAGAGNvdWNvdTQAAAAU
AIXyuq4PAAAACwAMAIrWRWAAAAAAZGuGNQoADAD21kVgAAAAALiZkBYJAAwA9tZFYAAAAAC4mZAW
NAAAABQAhfK6rg8AAAALAAwAitZFYAAAAABka4Y1CgAMAPbWRWAAAAAAuJmQFgkADAD21kVgAAAA
ALiZkBY9AAAAFAB+V8OuDwAJAGNvdWNvdV9tdgsADACu1kVgAAAAACcfjhQKAAwA3dZFYAAAAADk
Dj8nCQAMAPbWRWAAAAAAuJmQFgAAAAAVAFBsyZ0=
`
const rmdir_dump = `
YnRyZnMtc3RyZWFtAAEAAABOAAAAAgD5RDtoDwAKAHNuYXBfcm1kaXIBABAAXzb4KIcr1k2btGUI
/T5ZpgIACAAOAAAAAAAAABQAEAB7/UGp5a70T78PMXV9SE+6FQAIAA0AAAAAAAAANAAAABQAroIS
hQ8AAAALAAwAitZFYAAAAABka4Y1CgAMAF/XRWAAAAAAOGbsAQkADABf10VgAAAAADhm7AEVAAAA
CQDmvFpKDwAEAGFkaXIQAAkAbzI1OS0xMy0wNAAAABQAroIShQ8AAAALAAwAitZFYAAAAABka4Y1
CgAMAF/XRWAAAAAAOGbsAQkADABf10VgAAAAADhm7AESAAAACwDQSbsvDwAOAG8yNTktMTMtMC9s
b2NvDQAAAAwAlQGD8Q8ACQBvMjU5LTEzLTAAAAAAFQBQbMmd
`
const rmfile_dump = `
YnRyZnMtc3RyZWFtAAEAAABPAAAAAgDFNjjRDwALAHNuYXBfcm1maWxlAQAQAPGq3bgJuZBClN0n
GPPyF50CAAgADAAAAAAAAAAUABAAGBnf+ob+T065Qxael6X46hUACAALAAAAAAAAADQAAAAUAE8J
Vq0PAAAACwAMAIrWRWAAAAAAZGuGNQoADAAW10VgAAAAAKqJwywJAAwAFtdFYAAAAACqicMsDwAA
AAsAE06FqA8ACwBmaWxlLmVodnJuRDQAAAAUAE8JVq0PAAAACwAMAIrWRWAAAAAAZGuGNQoADAAW
10VgAAAAAKqJwywJAAwAFtdFYAAAAACqicMsAAAAABUAUGzJnQ==
`

func TestSendDumpAll() {
  TestSendDump(newfile_dump)
  TestSendDump(writefile_dump)
  TestSendDump(movefile_dump)
  TestSendDump(rmfile_dump)
  TestSendDump(mkdir_dump)
  TestSendDump(rmdir_dump)
}

func TestSendDump(dump_base64 string) {
  var err error
  var dump_bytes []byte
  var changes *pb.SnapshotChanges
  var pipe_out, pipe_in *os.File

  pipe_out, pipe_in, err = os.Pipe()
  if err != nil { panic(fmt.Sprintf("failed os.Pipe %v", err)) }
  defer pipe_out.Close()
  defer pipe_in.Close()

  dump_bytes, err = base64.StdEncoding.DecodeString(dump_base64)
  if err != nil { panic(fmt.Sprintf("failed base64.StdEncoding.DecodeString %v", err)) }

  // Dump should be small enough not to block pipe
  _, err = pipe_in.Write(dump_bytes)
  if err != nil { panic(fmt.Sprintf("failed pipe_in.Write %v", err)) }
  pipe_in.Close()

  changes, err = shim.ReadAndProcessSendStream(pipe_out)
  util.Infof("err=%v\nchanges=%s", err, changes)
}

