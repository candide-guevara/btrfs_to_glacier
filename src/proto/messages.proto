syntax = "proto3";
package messages;
// Cannot use "btrfs_to_glacier/messages" because it will influence the path
// where protoc will put the files...
option go_package = "./messages";

message SubVolume {
  // Both the uuid in the metadata storage AND the actual uuid of the snapshot.
  string uuid = 1;
  uint64 vol_id = 2;
  // This field may be left empty.
  // Corresponds to the path relative to the root of the filesystem.
  // It should be the same as what `/proc/mountinfo` or `path_ret` in `btrfs_util_subvolume_iterator_next`.
  string tree_path = 3;
  // This field may be left empty.
  // Besides is not always possible to calculate the absolute path where a subvolume is mounted from btrfs output.
  // * A subvolume may be mounted at different paths (ex: as a directory inside the rootvol or idependently)
  // * `btrfs subvol list` will return subvolumes/snapshots which may not be mounted
  // * Linking a mounted subvolume to its filesystem is not trivial (needs /sys/fs/btrfs and /proc/*/mountinfo)
  // * The link between a filesystem and its devices can be tricky if using a raid flavor of btrfs
  // * Bind mounts to inner parts of a subvolume are undistinguishable from mounts of the subvolume :/
  string  mounted_path = 4;
  uint64  gen_at_creation = 5;
  // Unix timestamp in seconds (although btrfs docs never mention this clearly)
  fixed64 created_ts = 6;
  // Only snapshots will have this field not empty
  string  parent_uuid = 7; 
  string  received_uuid = 8; 
  bool    read_only = 9;
  SnapshotChunks  data = 10;
  SystemInfo      origin_sys = 11;
}

message SnapshotChunks {
  message Chunk {
    // Does not correspond to any volume, purely an id for the data storage.
    string uuid = 1; 
    uint64 start = 2;
    uint64 size = 3;
  }
  string key_fingerprint = 3;
  repeated Chunk chunks = 4;
}

message SystemInfo {
  uint32 kern_major = 1;
  uint32 kern_minor = 2;
  uint32 btrfs_usr_major = 5;
  uint32 btrfs_usr_minor = 6;
  string tool_git_commit = 7;
}

message SnapshotSeqHead {
  // Both the uuid in the metadata storage
  // AND the actual uuid of the volume being backed up.
  string uuid = 1; 
  string cur_seq_uuid = 2;
  repeated string prev_seq_uuid = 3;
}

message SnapshotSequence {
  // Does not correspond to any volume, purely an id for the metadata storage.
  string uuid = 1; 
  // The volume being backed up. All `snaps` should be children of `volume`.
  SubVolume volume = 2;
  // Ordered from oldest to newest.
  repeated string snap_uuids = 3;
}

message AllMetadata {
  fixed64 created_ts = 1;
  repeated SnapshotSeqHead heads = 2;
  repeated SnapshotSequence sequences = 3;
  repeated SubVolume snapshots = 4;
}

message SnapshotChanges {
  enum Type {
    UNKNOWN = 0;
    WRITE = 1;
    DELETE = 2;
    DEL_DIR = 3;
    NEW = 4;
    NEW_DIR = 5;
    MOVE = 6; // AFAIK cannot distinguish between dir and files moves
  }
  message Change {
    Type type = 1;
    string path = 2;
    string from = 3;
  }
  string from_uuid = 1; 
  string to_uuid = 2; 
  repeated Change changes = 3;
}

